A pipe is one of the techniques used  for passing information from one program process to another and is a one-way communication. Pipes pass a parameter such as an output of one process to another which accepts it as a input. The output of the first command sequence is used as the input of the second command sequence. Two-way communication can be established by setting up 2 pipes, one for each direction. The pipes limitation in any communication especially interprocess communications is that the process using the pipes must have a common parent process. The pipe is fixed in size ranging from at least 4.096 gigabytes. 

Shared memory is the fastest interprocess communications mechanism. The operating system maps a memory segment in the address of several processes. This allows for the several process to read and write in the memory segment without using any os functions. However, A synchronization between the processes that read and write the memory. Shared memory helps avoid two data copies but a synchronization must be created in order to access the shared memory segment.  

Shared memory is faster than pipe in communicating process and commands. The pipe system is more a user friendly system than shared memory as it does not require a synchronization between two processes to map out the memory segment. Pipes do require identical processes in interprocess communication while shared memory has two different process working together to map out the memory segment in interprocess communication. Pipes systems can use a lot of memory just to send processes and commands to their partners. Shared memory allows for more efficiency and also avoids data copies. 

As a beginner at coding, I would want to start out with pipe systems because it is an easier system for interprocess communication. For pipes, the process is fairly simplistic letting the coder use a universal process in order to send his ideas with his fellow coders. Pipes also allow for a simplistic process as the output the you send of one process becomes an input of another process for the fellow coder to receive and use as base set for his sequence. Once I get more advanced in coding, I would want to use shared memory as it is more efficient process already having many process set up to read and write the memory segment which would contain the sequences. Also, I wouldn’t have to code any additional functions for the os since it has been already synchronized with the 2 processes. I would be very tired in the day to be able to code another process just to send commands and sequences to another fellow code. The synchronization would take days to create and be very challenging but I would not have to create another synchronization. I can use this process whenever I wanted to and I would not have to worry about it for a very long time.